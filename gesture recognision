import cv2
import mediapipe as mp
mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils

cap = cv2.VideoCapture(0)
def count_fingers(hand_landmarks):
    # Thumb: Compare tip and bottom landmark x coordinates
    thumb_is_open = hand_landmarks.landmark[4].x < hand_landmarks.landmark[3].x

    # Other fingers: Compare tip and bottom landmark y coordinates
    fingers = [
        hand_landmarks.landmark[8].y < hand_landmarks.landmark[6].y,  # Index finger
        hand_landmarks.landmark[12].y < hand_landmarks.landmark[10].y,  # Middle finger
        hand_landmarks.landmark[16].y < hand_landmarks.landmark[14].y,  # Ring finger
        hand_landmarks.landmark[20].y < hand_landmarks.landmark[18].y   # Pinky finger
    ]

    return thumb_is_open + sum(fingers)

with mp_hands.Hands(min_detection_confidence=0.7, min_tracking_confidence=0.7) as hands:
    while cap.isOpened():
        success, image = cap.read()
        if not success:
            break
        
        # Flip the image horizontally for a later selfie-view display
        image = cv2.flip(image, 1)
        
        # Convert the BGR image to RGB
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        
        # Process the image and detect hands
        results = hands.process(image_rgb)
        
        # Draw the hand annotations on the image
        if results.multi_hand_landmarks:
            for hand_landmarks in results.multi_hand_landmarks:
                mp_drawing.draw_landmarks(image, hand_landmarks, mp_hands.HAND_CONNECTIONS)
                
                # Count fingers
                finger_count = count_fingers(hand_landmarks)
                
                # Display the number of raised fingers
                cv2.putText(image, str(finger_count), (50, 50), cv2.FONT_HERSHEY_SIMPLEX, 2, (255, 0, 0), 2, cv2.LINE_AA)
        
        # Show the image
        cv2.imshow('Hand Tracking', image)
        
        if cv2.waitKey(5) & 0xFF == 27:  # Press 'Esc' to exit
            break

cap.release()
cv2.destroyAllWindows()
